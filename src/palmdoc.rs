use crate::{
    hashtable::HashTable,
    window::{Window, MAX_MATCH_LEN},
};
use thiserror::Error;

pub fn compress(data: &[u8]) -> Vec<u8> {
    let mut out = Vec::with_capacity(data.len());

    let mut window = Window::new();
    let mut table = HashTable::new();

    let mut offset = 0;
    while offset < data.len() {
        let remainder = &data[offset..];
        if remainder.len() > 3 {
            let hash = table.hash(&remainder[..3]);
            table.insert(hash, window.position as u16);
            if let Some((distance, length)) = table.reference(hash, remainder, &window, offset) {
                // todo: this matches Calibre behavior where it doesn't encode length distance pairs that are close to the beginning or end of the data, but is this an actual PalmDoc limitation?
                if MAX_MATCH_LEN < offset && offset < data.len() - MAX_MATCH_LEN {
                    let m = distance as u16;
                    let code = 0x8000 + ((m << 3) & 0x3ff8) + ((length as u16) - 3);
                    out.extend(&code.to_be_bytes());

                    for _ in 0..length {
                        if offset + 3 < data.len() {
                            let hash = table.hash(&data[offset..offset + 3]);
                            table.insert(hash, window.position as u16);
                        }
                        window.push(data[offset]);
                        offset += 1;
                    }

                    continue;
                }
            }
        }

        // Single byte encoding or special cases handling
        let byte = data[offset];
        offset += 1;
        window.push(byte);

        if byte == b' ' && offset + 1 < data.len() && (0x40..0x80).contains(&data[offset]) {
            out.push(data[offset] ^ 0x80);

            if offset + 3 < data.len() {
                table.insert(table.hash(&data[offset..offset + 3]), offset as u16);
            }

            window.push(data[offset]);
            offset += 1;
            continue;
        }

        if byte == 0 || (byte > 8 && byte < 0x80) {
            out.push(byte);
        } else {
            let mut j = offset;
            let mut binseq = Vec::with_capacity(8);
            binseq.push(byte);

            while j < data.len() && binseq.len() < 8 {
                let ch = data[j];
                if ch == 0 || (ch > 8 && ch < 0x80) {
                    break;
                }

                binseq.push(ch);

                if j + 3 < data.len() {
                    table.insert(table.hash(&data[j..j + 3]), j as u16);
                }
                window.push(ch);

                j += 1;
            }

            out.extend(&(binseq.len() as u8).to_be_bytes());
            out.extend(&binseq);
            offset += binseq.len() - 1;
        }
    }

    out
}

#[derive(Error, Debug)]
pub enum DecompressError {
    #[error("offset to LZ77 bits is outside of the data")]
    OffsetOutsideData,
    #[error("LZ77 decompression offset is invalid")]
    InvalidOffset,
    #[error("not enough data")]
    NotEnoughData,
}

pub fn decompress(data: &[u8]) -> Result<Vec<u8>, DecompressError> {
    // Adapted from https://metacpan.org/release/AZED/EBook-Tools-0.3.3/source/lib/EBook/Tools/PalmDoc.pm
    let len = data.len();
    let mut offset = 0;
    let mut uncompressed = Vec::new();

    while offset < len {
        let byte = data[offset];
        offset += 1;

        if (1..=8).contains(&byte) {
            // Next bytes are literals
            if offset + byte as usize > len {
                return Err(DecompressError::NotEnoughData);
            }

            uncompressed.extend_from_slice(&data[offset..(offset + byte as usize)]);
            offset += byte as usize;
        } else if byte < 128 {
            // Values from 0x09 through 0x7f are literal
            uncompressed.push(byte);
        } else if byte >= 192 {
            // 0xc0 - 0xff are single characters (XOR 0x80) preceded by a space
            uncompressed.push(b' ');
            uncompressed.push(byte ^ 0x80);
        } else if offset < len {
            // Data is LZ77-compressed
            offset += 1;

            if offset > len {
                return Err(DecompressError::OffsetOutsideData);
            }

            let mut lz77 = u16::from_be_bytes([data[offset - 2], data[offset - 1]]);

            // Leftmost two bits are ID bits and need to be dropped
            lz77 &= 0x3fff;

            // Length is rightmost 3 bits + 3
            let lz77length = ((lz77 & 0x0007) as usize) + 3;

            // Remaining 11 bits are offset
            let lz77offset = (lz77 >> 3) as usize;

            // 0-run
            if lz77offset == 0 {
                let empty = vec![0u8; lz77length];
                uncompressed.extend_from_slice(&empty);
                continue;
            }

            // Getting text from the offset
            let mut textlength = uncompressed.len();
            for _ in 0..lz77length {
                if let Some(textpos) = textlength.checked_sub(lz77offset) {
                    uncompressed.push(uncompressed[textpos]);
                    textlength += 1;
                } else {
                    return Err(DecompressError::InvalidOffset);
                }
            }
        }
    }

    Ok(uncompressed)
}

#[cfg(test)]
mod tests {
    use lipsum::lipsum;
    use pretty_assertions::assert_eq;

    use super::*;

    fn get_calibre_testcases() -> Vec<(Vec<u8>, Vec<u8>)> {
        // Test cases taken from Calibre
        // (input, compressed_result)
        return vec![
            (
                hex::decode("616263030405066d73").unwrap(),
                hex::decode("61626304030405066d73").unwrap(),
            ),
            (
                hex::decode("612062206320fe6420").unwrap(),
                hex::decode("61e2e32001fe6420").unwrap(),
            ),
            (
                hex::decode("303132333435363738396178797a326278797a3263646667666f39697579657268")
                    .unwrap(),
                hex::decode("303132333435363738396178797a3262802963646667666f39697579657268")
                    .unwrap(),
            ),
            (
              hex::decode("30313233343536373839617364303132333435363738396173647c79797a7a7878666668686a6a6b6b").unwrap(),
              hex::decode("30313233343536373839617364806f80687c79797a7a7878666668686a6a6b6b").unwrap()
            ),
            (
              hex::decode("6369657761636e6171206569753734332072373837712030772520203b207361206664ef0c6664786f73616320776f636a702061636f6965636f776569206f77616963206a6f63696f7761706a636976636a706f69766a706f726569766a706f617663613b207039617738373433793672373425245e245e253820").unwrap(),
              hex::decode("6369657761636e6171e56975373433f2373837712030772520203bf361e66401ef0c6664786f736163f76f636a70e1636f6965636f776569ef77616963ea6f63698050706a63697681086f697680287265803a617663613bf03961773882f0793672373425245e245e253820").unwrap()
            ),
            (
                hex::decode("61626373646661736466616263646173646f66617373").unwrap(),
                hex::decode("61626373646661736466616263646173646f66617373").unwrap(),
            ),
        ];
    }

    #[test]
    fn test_compress_palmdoc() {
        for (input, expected) in get_calibre_testcases() {
            let compressed = compress(&input);
            assert_eq!(compressed, expected);
        }
    }

    #[test]
    fn test_decompress_palmdoc() {
        for (expected, compressed) in get_calibre_testcases() {
            let decompressed = decompress(&compressed).unwrap();
            assert_eq!(decompressed, expected);
        }
    }

    #[test]
    fn test_roundtrip() {
        let input = lipsum(4096);
        let input = input.as_bytes()[..4096].to_vec();

        let compressed = compress(&input);
        let decompressed = decompress(&compressed).unwrap();
        assert_eq!(input, decompressed);
    }

    #[test]
    fn test_null_run_length() {
        let compressed = hex::decode("61726973f46ff6697302c2ad6974cd61646502c2ad6d6f6902c2ad73656c6c65c7656f7267653bf4686174e174e86572e86f7573658050e3616d65f57002c2ad6f6ec26f6e6102c2ad70617274652cf7686fe16c82206fe56e02c2ad6a6f796564821865e681206d81f8e16302c2ad747265737303e2809980b2766f72732ce16e81418340696ee884d870811802c2ad656e6365ce61706f6c6583506861839070656e82996f81e06c6c817082706fef6e65ef66834c696e7486986e67e669748722776869636885b9776173f3756284c065637483a38099746884c17481fa64756384c873ed657202c2ad63792ed480a86c61829074880873873883f068696d859585586d616702c2ad88216e696d83c881507988af74658393738af071756584d96c79f2807070616964e279e4656174682e3c2f703e0a0909093c70e36c6173733d2263616c69627265313722e169643d22374b344755223e848173746f02c2ad727985ea76658048897085117984aa88a285f96573884b2ce58a607083a063698ce984088774706f8968890065726580827285f076616c89316402c2ad648e1985728da06f8729697a87f08b696180d06f74688320723b8854893964696573ec6f6f6b813888b1886989e16564870f870f870f870e56223e03e2809c436861728a596e672103e2809df389514183906e61d002c3a1766c6f7680627769746883e8878a71756987908fb1676c6191b187146c6988c9968070726980b87373844f844f844f844d4830844f844f92488a4a902182ef82ef9640737469636b844b81116e658bb0648110954c9a31776f726be173e995886ff48ce17489486679980b81b98e1f739be88af86661813063813092b974699868977c905d90108dd893029509833866726f6de780f084618188897269748807880788078806319353768398636f6d96309be2832984318ea397fb73696c83b884086169a0e88569736d6993308c627261748198667593b382029a1b87d0636f8731875975a1d0627574ea75877886b06e8f778f76a2e3686164eb657088a897e87463940882e0e5799ff86e8882796f7583c06d90b08179a438616c8e18889b2cee88788d0885daa6a2a003616c8d9d6f6f95f897e19921865876858868a8c99dd58a328349619ea86202c3a98f908338808068758d78726986db9a628ec96375652ed06965729b0885e184c889f06781337374a1008650884a9e40a1308ef5833f833b80406f89088091629e19971a9018706f779c21a475a55f9fa089b88d589e2885d392a7a0b98410a3e0899784c8a7c273a621706c652d6d696e883881386584a06781c16e970a898965788121ab4889b3ad826584f2a0b094792ea808860877a2c28af685216c9a1174a2c98b8583068b9c80a16e8631758250a57b8fe1ae1983e177687990f7a0676482c195236f76a37f97379737973748329f3297496d65616eb028726506e2808ae280a68b578b578b52b5014584d16f70976ba9bb6768b3589c9c706588208a182ca1998e2701a9b3fb617987da2e2083c849b77881b8ab336eab3191a173619e80666f72ab4a83bc97439fee6c696b65d2758169696103e2809462618110802a6963a2d994899cd9a9c993486286b0019480408da086689850bf2a6689ab90c790c3b107815995a086b89a788c52698872686192d9bb098528bb216fba9c81a26d90c29fb96e89e58a6f8a6f8a6a80588a6d961b69b4706f756ca2206176b49ba9706c64abf18e978e978e978e95338e92429960686f778e819701882167950a86c0844e3f8d019ce48cd96285986785e16e8d01837f837f837f837d34223e4182c46d8fb0a13994f794f763616d65f57087192cb9028a0373ada2a8a98b9b846b885073ba0987f14999f081608c008679af836f648fde6e84e09f206dab302ed481879e6c668f798691a350a0346368616ea3f98b69b2a17375a8e982486f6693209cc17369a7a9848980926390aaa73875be8094d19feaa6ea739458a347a34568952862b8c98ec8616c8bd968696d9db8aeb0a74d93b267a72b776fa388656e8b878b878b878b86358efa49e16dabc185798689a687934972b3f1955980e87993fd836087a263b45974758f98ba0d8db8b6996574a3386d6f80c886d970b74aa3f3815566658550bc19699cc081bf81b8a0a0a50b4998e1af5399fa87819e496692ea87a1ba12658b188a9891ba819c6e6f74f9951881da699170b232696e6b83f58f4ea2ba9ed2686589b789b789b789b636223e4e83006c65b0e1abc2a4b788b29834b592619c619627bc079eea89098e3c88518fad85706b65657081216df580f8649ef1831073a2d176a5c4bf30726f75a9608143a142b96bbd2892f881a063698180636c86d63c3f786d6cbc387293693d22312e30228fb8636f6486383d225554462d38223f3e0a3c6874813881586e8818687474703a2f2f7777772e77332e6f72672f313939392f78812122835881d1656e2d5553223e0a20203ca729804980587469746c653e49563c2f805380b36d657461e882a82d65717569763d22436f6eb618742d5479706522887980713d22746578742f83293b9b39727365743d75746685082f83426c8e7172656c3d227374796c65ad20657422f4822081dc63737322e87265663d226bbbf06c653a666c6f773a303030313f6d90a03d81368288827f827f827f827f827f827f32827f827e2f883d3c626f64a14092779270926438494c323089a88cb873a0c8b451646174612d70ab4088098040742d312d3122e98170882070b2c880892d3422f26f6c84d0646f632d80cc89d0832b657075622d85c92d8bb2706167838f4c3231838a093c2f839c80703c2f852185aa8b708ff134858f97fb36821732bf308e996834995f816266697273748470696c64817732b2104a7573951ab7b09e09746894da76b972959972a3d28618ad34647261b6809efa6f6f6d3ad07269b7499a29647202c3a979c26f6c6b02c3b3aae902c2ad6b699a5b6ca9218778f081727373ad98e8aec9629c982ec8b4b36197e9aab16ebcd0736fa0d0b68883506d619a78a0e0adf884a0756da070699ad02caab386d86d2c874065617263b86066659c11a7b0732ec57602c2ad6572009b888001840287").unwrap();

        let expected_data = hex::decode("").unwrap();

        let decompressed = decompress(&compressed).unwrap();

        assert_eq!(decompressed, expected_data);
    }
}
